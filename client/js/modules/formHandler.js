import { FormValidator } from './formValidation.js';
import { TELEGRAM_CONFIG } from '../config/telegram.js';
import { RateLimiter } from '../utils/rateLimiter.js';
import { AlertManager } from './alerts.js';

export class FormHandler {
    constructor() {
        this.form = document.getElementById('contact-form');
        this.validator = new FormValidator(this.form);
        this.alertManager = new AlertManager();
        this.rateLimiter = new RateLimiter(TELEGRAM_CONFIG.RATE_LIMIT_MS);
        this.init();
    }

    init() {
        this.form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!this.validator.validateForm()) {
                this.alertManager.show('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'error');
                return;
            }

            if (!this.rateLimiter.canMakeRequest()) {
                const waitTime = Math.ceil(this.rateLimiter.getTimeToWait() / 1000);
                this.alertManager.show(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${waitTime} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π`, 'error');
                return;
            }

            if (this.rateLimiter.getMessageCount() >= TELEGRAM_CONFIG.MAX_MESSAGES_PER_SESSION) {
                this.alertManager.show('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
                return;
            }

            await this.handleSubmit();
        });
    }

    async handleSubmit() {
        const submitButton = this.form.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

        try {
            const formData = this.getFormData();
            const message = this.formatMessage(formData);

            const response = await this.sendToTelegram(message);
            const result = await response.json();

            if (result.ok) {
                this.rateLimiter.recordRequest();
                this.alertManager.show('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
                this.form.reset();
            } else {
                throw new Error(result.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            this.alertManager.show('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        } finally {
            submitButton.disabled = false;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram';
        }
    }

    getFormData() {
        return {
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            subject: document.getElementById('subject').value.trim(),
            message: document.getElementById('message').value.trim()
        };
    }

    formatMessage(formData) {
        return `
üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: ${this.sanitizeInput(formData.name)}
üìß Email: ${this.sanitizeInput(formData.email)}
üìù –¢–µ–º–∞: ${this.sanitizeInput(formData.subject)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${this.sanitizeInput(formData.message)}
        `.trim();
    }

    sanitizeInput(input) {
        return input
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');
    }

    async sendToTelegram(message) {
        return fetch(`https://api.telegram.org/bot${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CONFIG.CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
    }
} 